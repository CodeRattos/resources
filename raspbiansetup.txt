Installing Raspbian
#Download Raspbian Buster with desktop and recommended software from the following link
https://www.raspberrypi.org/downloads/raspbian/
#Go to the directory where the raspbianxx.zip image is downloaded and unzip. You should now have a raspbianxx.img file
#Assuming that you have a usb sdcard reader, find the mount location of your card reader
sudo fdisk -l
#If the location of your usb sdcard is /dev/sdX,
sudo dd bs=4M if=xxxraspbianxxx.img of=/dev/sdX conv=fsync
##Plug the sdcard into your rpi and power up.  Make sure that you are connected to the internet.

#Python configuration
#Open a terminal and type the #following commands
sudo apt update && sudo apt upgrade
#Install subversion
sudo apt install subversion
#Check python3 version
python3 --version
sudo update-alternatives --list python
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 1
pip install --upgrade pip

#Installing python for math computing
sudo apt-get install libatlas-base-dev gfortran python-pybind11
sudo pip install setuptools numpy scipy matplotlib mpmath sympy  cvxpy
sudo pip install cvxopt
#if cvxopt fails, then
sudo pip install -Iv cvxopt==1.1.8

#Install latex
sudo apt install texlive-full texmaker okular
#Download Test Directory for LaTeX and Python
svn co https://github.com/gadepall/school/trunk/training

#Testing python installation
#Open geany and execute the following file for numpy
training/math/codes/tri_sss.py
#by pressing F5
#and the following file for scipy
training/chemistry/codes/chembal.py

#Testing Latex Installation
#For latex document, open 
training/chemistry/gvv_eq_balance.tex
#and press 
F2, F4, F8 and F7
#For latex slides, open 
training/presentation/example.tex
#and press 
F2, F4, F8 and F7
#For latex figures, open 
training/math/figs/tri_sss_alone.tex
#and execute
#For including figures in a latex document, open
training/math/gvv_math_eg.tex
#and execute

#Installing Arduino and AVR toolchain
sudo apt install arduino avra
sudo usermod -a -G dialout $USER
kill -9 -1
#login again

#Test Arduino IDE by following the instructions in 
https://github.com/gadepall/arduino/blob/master/ide/setup/gvv_ard_ide_setup.pdf
#to execue the blink program

#AVR Assembly
#Download the following codes
wget https://raw.githubusercontent.com/gadepall/arduino/master/assembly/setup/m328Pdef/m328Pdef.inc
wget https://raw.githubusercontent.com/gadepall/arduino/master/assembly/setup/codes/hello.asm
#Configure geany and test AVR-Assembly by following the instructions in
https://github.com/gadepall/arduino/blob/master/assembly/setup/gvv_ard_assembly_setup.pdf

#AVR-GCC
#Download relevant codes from 
svn checkout https://github.com/gadepall/arduino/trunk/avr-gcc/setup/codes
#Follow instructions in 
https://github.com/gadepall/arduino/blob/master/avr-gcc/setup/gvv_avrgcc_setup.pdf
#for executing the codes

#Wiring Pi
#Installation
git clone https://github.com/WiringPi/WiringPi.git
cd WiringPi && ./build
cp blink.c ~
cd ~
#Check gpio pin configuration
pinout
#The wiring pi pin numbers can be obtained from 
https://pinout.xyz/
#Connect  GPIO pin 0  of the pi to an LED 
#and execute the following code
gcc -Wall -o test blink.c -lwiringPi
sudo ./test
#The led should blink now

