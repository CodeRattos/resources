Installing Raspbian
#Download Raspbian Buster with desktop and recommended software from the following link
https://www.raspberrypi.org/downloads/raspbian/
#Go to the directory where the raspbianxx.zip image is downloaded and unzip. You should now have a raspbianxx.img file
#Assuming that you have a usb sdcard reader, find the mount location of your card reader
sudo fdisk -l
#If the location of your usb sdcard is /dev/sdX,
sudo dd bs=4M if=xxxraspbianxxx.img of=/dev/sdX conv=fsync
##Plug the sdcard into your rpi and power up.  Make sure that you are connected to the internet.

#Enabling ssh
https://www.raspberrypi.org/documentation/remote-access/ssh/


#Enabling VNC
https://www.raspberrypi.org/documentation/remote-access/vnc/
#Installing package
sudo apt install tightvncserver
#Configuring vnc
#On terminal
vncserver
vncserver -kill :1
nano .vnc/xstartup 
#paste the following
#!/bin/sh
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
exec startlxde
#save and exit
#This has to be done only once

#Start the vncserver
bash ~/vncstart.sh
#This has to be done everytime 


#Python configuration
#Open a terminal and type the #following commands
sudo apt update && sudo apt upgrade
#Install subversion
sudo apt install subversion
#Check python3 version
python3 --version
sudo update-alternatives --list python
sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.7 1
pip install --upgrade pip

#Installing python for math computing
sudo apt-get install libatlas-base-dev gfortran python-pybind11
sudo pip install setuptools numpy scipy matplotlib mpmath sympy  cvxpy
sudo pip install cvxopt
#if cvxopt fails, then
sudo pip install -Iv cvxopt==1.1.8

#Install latex
sudo apt install texlive-full texmaker okular
#Download Test Directory for LaTeX and Python
svn co https://github.com/gadepall/school/trunk/training

#Testing python installation
#Open geany and execute the following file for numpy
training/math/codes/tri_sss.py
#by pressing F5
#and the following file for scipy
training/chemistry/codes/chembal.py

#Testing Latex Installation
#For latex document, open 
training/chemistry/gvv_eq_balance.tex
#and press 
F2, F4, F8 and F7
#For latex slides, open 
training/presentation/example.tex
#and press 
F2, F4, F8 and F7
#For latex figures, open 
training/math/figs/tri_sss_alone.tex
#and execute
#For including figures in a latex document, open
training/math/gvv_math_eg.tex
#and execute

#Installing Arduino and AVR toolchain
sudo apt install arduino avra
sudo usermod -a -G dialout $USER
kill -9 -1
#login again

#Test Arduino IDE by following the instructions in 
https://github.com/gadepall/arduino/blob/master/ide/setup/gvv_ard_ide_setup.pdf
#to execue the blink program

#AVR Assembly
#Download the following codes
wget https://raw.githubusercontent.com/gadepall/arduino/master/assembly/setup/m328Pdef/m328Pdef.inc
wget https://raw.githubusercontent.com/gadepall/arduino/master/assembly/setup/codes/hello.asm
#Configure geany and test AVR-Assembly by following the instructions in
https://github.com/gadepall/arduino/blob/master/assembly/setup/gvv_ard_assembly_setup.pdf

#AVR-GCC
#Download relevant codes from 
svn checkout https://github.com/gadepall/arduino/trunk/avr-gcc/setup/codes
#Follow instructions in 
https://github.com/gadepall/arduino/blob/master/avr-gcc/setup/gvv_avrgcc_setup.pdf
#for executing the codes

#Wiring Pi
#Installation
git clone https://github.com/WiringPi/WiringPi.git
cd WiringPi && ./build
cp blink.c ~
cd ~
#RPi has 3 types of pin numbers
#Normal numbering from 1-40
#BCM pio pin configuration which can be obtained by typing
pinout
#on the terminal and
#The wiring pi pin numbers can be obtained from 
https://pinout.xyz/
#Connect  wiring pi GPIO pin 0 (normal pin 13)  of the pi to an LED 
#This
#and execute the following code
gcc -Wall -o test blink.c -lwiringPi
sudo ./test
#The led should blink now.  Note that wiring pi uses pin number 13, the default pin number for arduino.

#Arm Toolchain
#Base packages
sudo apt-get install git autoconf libtool make automake texinfo pkg-config libusb-1.0-0 libusb-1.0-0-dev gcc-arm-none-eabi libnewlib-arm-none-eabi telnet

#Create working directory
 cd ~
 mkdir -p ~/sandbox
 cd sandbox

#Download Openocd
git clone git://repo.or.cz/openocd.git

#Download Example files
git clone https://github.com/gadepall/STM32F103C8T6.git

#Install openocd
cd openocd
./bootstrap
./configure --enable-sysfsgpio --enable-bcm2835gpio
make -j4
sudo make install

#SWDIO, SWCLK and RESET Pins for RPi-STM32 connection
#On the RPi, type
pinout
#This will give the GPIO pin configuration on the RPi. Now open
nano /usr/local/share/openocd/scripts/interface/sysfsgpio-raspberrypi.cfg
#and verify that the file contains the lines (at
#different locations)
# Each of the SWD lines need a gpio number
set: swclk swdio
# Header pin numbers: 23 22
sysfsgpio_swd_nums 11 25
# Header pin numbers: TRST -26, SRST -18
sysfsgpio_srst_num 24
reset_config_srst_only srst_push_pull
#End pin configuration for SWDIO, SWCLK and RESET Pins for RPi-STM32 connection

#Pin Connections from RPi to STM
#Connect according to Table III in the following manual
https://github.com/gadepall/arm-embedded/blob/master/setup/gvv_stm32_tinker_setup.pdf

#sysfsgpio configuration for communication
cp ~/sandbox/STM32F103C8T6/refs/openocd.cfg ~/sandbox/openocd
sudo openocd -f /usr/local/share/openocd/scripts/interface/sysfsgpio-raspberrypi.cfg -c "transport select swd" -c "adapter_khz 1000" -f /usr/local/share/openocd/scripts/target/stm32f1x.cfg
telnet localhost 4444

#Ensure that the make file configuration has the following
CC=arm-none-eabi-gcc
OBJCOPY =arm-none-eabi-objcopy
OBJDUMP = arm-none-eabi-objdump
arm-none-eabi-size $(PRJ NAME).elf
#at the appropriate locations

#Generating the bin file
cp ~/sandbox/STM32F103C8T6/examples/blink.c ~/sandbox/STM32F103C8T6/src/main.c
cd ~/sandbox/STM32F103C8T6/
sudo make bin
cp main.bin cd ~/sandbox/openocd

#Flashing the bin file
#Go to the telnet terminal
reset halt
flash write image erase main.bin 0
x08000000
reset run










